steps:
  # Build the Docker image for container2
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/container2/container2:$COMMIT_SHA', './container2']
  # Push the image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/container2/container2:$COMMIT_SHA']
  # Authenticate with GKE cluster
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['container', 'clusters', 'get-credentials', 'assignment-3', '--zone', 'us-central1-c', '--project', '$PROJECT_ID']
  # Update image tag in container2.yaml
  - name: 'ubuntu'
    args: ['sed', '-i', "s|:latest|:$COMMIT_SHA|g", 'kubernetes/container2.yaml']
  # Apply the PVC
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'kubernetes/pv-claim.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_REGION=us-central1'
      - 'CLOUDSDK_CONTAINER_CLUSTER=assignment-3'
  # Apply the container2 deployment and service
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'kubernetes/container2.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_REGION=us-central1'
      - 'CLOUDSDK_CONTAINER_CLUSTER=assignment-3'
options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: ALLOW_LOOSE